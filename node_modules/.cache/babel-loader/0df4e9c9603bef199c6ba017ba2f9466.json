{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\IdeaProjects\\\\FireFrontEnd\\\\src\\\\FilteredTable.js\";\nimport React, { useState, useEffect } from 'react';\nimport Table from \"./Table\";\nimport ReactSelect from \"./ReactSelect\";\nexport default function SimpliestFilteredTable(props) {\n  const [fires, setFires] = useState([]);\n  const {\n    name,\n    fireStation,\n    message,\n    district,\n    destination,\n    whereWasTheFire,\n    rescueWorks,\n    fireChiefRank,\n    amountOfSmokeGroups,\n    extinguishingAgents,\n    usingHydrants,\n    locality,\n    fireRank\n  } = props.match.params;\n  const objectWithProperties = {\n    fireStation,\n    message,\n    district,\n    destination,\n    whereWasTheFire,\n    rescueWorks,\n    fireChiefRank,\n    amountOfSmokeGroups,\n    extinguishingAgents,\n    usingHydrants,\n    locality,\n    fireRank\n  };\n  const encoded = encodeURI(`/api/get/${name}`);\n  useEffect(api => {\n    if (checkProperties(objectWithProperties)) {\n      fetch(encoded, {\n        method: \"POST\",\n        body: JSON.stringify({\n          fireStation,\n          message,\n          district,\n          destination,\n          whereWasTheFire,\n          rescueWorks,\n          fireChiefRank,\n          amountOfSmokeGroups,\n          extinguishingAgents,\n          usingHydrants,\n          locality,\n          fireRank\n        }),\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\"\n        }\n      }).then(response => response.json()).then(data => {\n        setFires(data);\n      });\n      fetchTable({\n        setFires,\n        name\n      });\n    } else {\n      fetch(encoded).then(response => response.json()).then(data => {\n        setFires(data);\n      });\n    }\n  }, [name]);\n  const result = /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 20\n    }\n  }, \"\\u0418\\u0442\\u043E\\u0433\\u043E \\u0432\\u044B\\u0435\\u0437\\u0434\\u043E\\u0432: \", fires.length);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"box1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ReactSelect, {\n    onSubmit: state => fetchTable({\n      setFires,\n      name,\n      ...state\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"box2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, result)), /*#__PURE__*/React.createElement(\"table\", {\n    className: \"table-sm table-hover table-striped\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    fires: fires,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  })));\n}\n\nconst fetchTable = ({\n  fireStation,\n  message,\n  district,\n  destination,\n  whereWasTheFire,\n  rescueWorks,\n  fireChiefRank,\n  amountOfSmokeGroups,\n  extinguishingAgents,\n  usingHydrants,\n  locality,\n  fireRank,\n  name,\n  setFires\n}) => {\n  const encoded = encodeURI(`/api/get/${name}`);\n  fetch(encoded, {\n    method: \"POST\",\n    body: JSON.stringify({\n      fireStation,\n      message,\n      district,\n      destination,\n      whereWasTheFire,\n      rescueWorks,\n      fireChiefRank,\n      amountOfSmokeGroups,\n      extinguishingAgents,\n      usingHydrants,\n      locality,\n      fireRank\n    }),\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\"\n    }\n  }).then(response => response.json()).then(data => {\n    console.log(data.length);\n    setFires(data);\n  });\n};\n\nfunction checkProperties(obj) {\n  for (let key in obj) {\n    if (obj[key] !== null && obj[key] !== '') return false;\n  }\n}","map":{"version":3,"sources":["C:/Users/Alex/IdeaProjects/FireFrontEnd/src/FilteredTable.js"],"names":["React","useState","useEffect","Table","ReactSelect","SimpliestFilteredTable","props","fires","setFires","name","fireStation","message","district","destination","whereWasTheFire","rescueWorks","fireChiefRank","amountOfSmokeGroups","extinguishingAgents","usingHydrants","locality","fireRank","match","params","objectWithProperties","encoded","encodeURI","api","checkProperties","fetch","method","body","JSON","stringify","headers","then","response","json","data","fetchTable","result","length","state","console","log","obj","key"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Table from \"./Table\";\r\nimport ReactSelect from \"./ReactSelect\";\r\n\r\nexport default function SimpliestFilteredTable (props) {\r\n\r\n    const [fires, setFires] = useState ([]);\r\n    const { name, fireStation, message, district, destination, whereWasTheFire, rescueWorks,\r\n        fireChiefRank, amountOfSmokeGroups, extinguishingAgents, usingHydrants, locality,\r\n        fireRank }  = props.match.params;\r\n    const objectWithProperties = { fireStation, message, district, destination, whereWasTheFire, rescueWorks,\r\n        fireChiefRank, amountOfSmokeGroups, extinguishingAgents, usingHydrants, locality, fireRank };\r\n    const encoded = encodeURI(`/api/get/${name}`);\r\n    useEffect((api) => {\r\n        if (checkProperties(objectWithProperties)) {\r\n            fetch(encoded, {\r\n                method: \"POST\",\r\n                body: JSON.stringify({\r\n                    fireStation,\r\n                    message,\r\n                    district,\r\n                    destination,\r\n                    whereWasTheFire,\r\n                    rescueWorks,\r\n                    fireChiefRank,\r\n                    amountOfSmokeGroups,\r\n                    extinguishingAgents,\r\n                    usingHydrants,\r\n                    locality,\r\n                    fireRank\r\n                }),\r\n                headers: {\r\n                    \"Content-type\": \"application/json; charset=UTF-8\"\r\n                }\r\n            })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    setFires(data);\r\n                });\r\n            fetchTable({setFires, name})\r\n        } else {\r\n            fetch(encoded)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    setFires(data);\r\n                });\r\n        }\r\n    }, [name]);\r\n\r\n    const result = <h3>Итого выездов: {fires.length}</h3>;\r\n    return (\r\n        <>\r\n            <div class=\"box\">\r\n                <div class=\"box1\">\r\n                    <ReactSelect onSubmit={(state) => fetchTable({setFires, name, ...state})}/>\r\n                </div>\r\n                <div class=\"box2\" >\r\n                    {result}\r\n                </div>\r\n            </div>\r\n            <table className=\"table-sm table-hover table-striped\">\r\n                <Table fires = {fires}/>\r\n\r\n            </table>\r\n        </>\r\n    )\r\n}\r\n\r\nconst fetchTable = ({fireStation, message, district, destination, whereWasTheFire,\r\n                        rescueWorks, fireChiefRank, amountOfSmokeGroups,\r\n                        extinguishingAgents, usingHydrants, locality, fireRank,\r\n                        name, setFires}) => {\r\n    const encoded = encodeURI(`/api/get/${name}`);\r\n    fetch(encoded, {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n            fireStation,\r\n            message,\r\n            district,\r\n            destination,\r\n            whereWasTheFire,\r\n            rescueWorks,\r\n            fireChiefRank,\r\n            amountOfSmokeGroups,\r\n            extinguishingAgents,\r\n            usingHydrants,\r\n            locality,\r\n            fireRank\r\n        }),\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\"\r\n        }\r\n    })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            console.log(data.length);\r\n            setFires(data);\r\n        });\r\n\r\n}\r\n\r\nfunction checkProperties(obj) {\r\n    for(let key in obj){\r\n        if (obj[key] !== null && obj[key] !== '')\r\n            return false\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}