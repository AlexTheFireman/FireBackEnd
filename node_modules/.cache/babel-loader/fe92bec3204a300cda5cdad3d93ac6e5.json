{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Alex\\\\IdeaProjects\\\\FireFrontEnd\\\\src\\\\FilteredTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Table from \"./Table\";\nimport ReactSelect from \"./ReactSelect\";\nexport default function SimplestFilteredTable(props) {\n  _s();\n\n  const [fires, setFires] = useState([]);\n  const {\n    name,\n    fireStation,\n    message,\n    district,\n    destination,\n    whereWasTheFire,\n    rescueWorks,\n    fireChiefRank,\n    amountOfSmokeGroups,\n    extinguishingAgents,\n    usingHydrants,\n    locality,\n    fireRank\n  } = props.match.params;\n  const objectWithProperties = {\n    fireStation,\n    message,\n    district,\n    destination,\n    whereWasTheFire,\n    rescueWorks,\n    fireChiefRank,\n    amountOfSmokeGroups,\n    extinguishingAgents,\n    usingHydrants,\n    locality,\n    fireRank\n  };\n  const encoded = encodeURI(`/api/get/${name}`);\n  useEffect(api => {\n    if (checkProperties(objectWithProperties)) {\n      fetch(encoded, {\n        method: \"POST\",\n        body: JSON.stringify({\n          fireStation,\n          message,\n          district,\n          destination,\n          whereWasTheFire,\n          rescueWorks,\n          fireChiefRank,\n          amountOfSmokeGroups,\n          extinguishingAgents,\n          usingHydrants,\n          locality,\n          fireRank\n        }),\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\"\n        }\n      }).then(response => response.json()).then(data => {\n        setFires(data);\n      });\n      fetchTable({\n        setFires,\n        name\n      });\n    } else {\n      fetch(encoded).then(response => response.json()).then(data => {\n        setFires(data);\n      });\n    }\n  }, [name]);\n\n  const result = /*#__PURE__*/_jsxDEV(\"h3\", {\n    children: [\"\\u0418\\u0442\\u043E\\u0433\\u043E \\u0432\\u044B\\u0435\\u0437\\u0434\\u043E\\u0432: \", fires.length]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 20\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box1\",\n        children: /*#__PURE__*/_jsxDEV(ReactSelect, {\n          onSubmit: state => fetchTable({\n            setFires,\n            name,\n            ...state\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box2\",\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table-sm table-hover table-striped\",\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        fires: fires\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SimplestFilteredTable, \"m+hUmnw+PuO+99JSJPEe5WepFh0=\");\n\n_c = SimplestFilteredTable;\n\nconst fetchTable = ({\n  fireStation = \"\",\n  message = \"\",\n  district = \"\",\n  destination = \"\",\n  whereWasTheFire = \"\",\n  rescueWorks = \"\",\n  fireChiefRank = \"\",\n  amountOfSmokeGroups = \"\",\n  extinguishingAgents = \"\",\n  usingHydrants = \"\",\n  locality = \"\",\n  fireRank = \"\",\n  name,\n  setFires\n}) => {\n  const encoded = encodeURI(`/api/get/${name}`);\n  fetch(encoded, {\n    method: \"POST\",\n    body: JSON.stringify({\n      fireStation,\n      message,\n      district,\n      destination,\n      whereWasTheFire,\n      rescueWorks,\n      fireChiefRank,\n      amountOfSmokeGroups,\n      extinguishingAgents,\n      usingHydrants,\n      locality,\n      fireRank\n    }),\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\"\n    }\n  }).then(response => response.json()).then(data => {\n    console.log(data.length);\n    setFires(data);\n  });\n};\n\nfunction checkProperties(obj) {\n  for (let key in obj) {\n    if (obj[key] !== null && obj[key] !== '') return false;\n  }\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"SimplestFilteredTable\");","map":{"version":3,"sources":["C:/Users/Alex/IdeaProjects/FireFrontEnd/src/FilteredTable.js"],"names":["React","useState","useEffect","Table","ReactSelect","SimplestFilteredTable","props","fires","setFires","name","fireStation","message","district","destination","whereWasTheFire","rescueWorks","fireChiefRank","amountOfSmokeGroups","extinguishingAgents","usingHydrants","locality","fireRank","match","params","objectWithProperties","encoded","encodeURI","api","checkProperties","fetch","method","body","JSON","stringify","headers","then","response","json","data","fetchTable","result","length","state","console","log","obj","key"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Table from \"./Table\";\nimport ReactSelect from \"./ReactSelect\";\n\nexport default function SimplestFilteredTable (props) {\n\n    const [fires, setFires] = useState ([]);\n    const { name,\n            fireStation,\n            message,\n            district,\n            destination,\n            whereWasTheFire,\n            rescueWorks,\n            fireChiefRank,\n            amountOfSmokeGroups,\n            extinguishingAgents,\n            usingHydrants,\n            locality,\n            fireRank }  = props.match.params;\n    const objectWithProperties = {\n            fireStation,\n            message,\n            district,\n            destination,\n            whereWasTheFire,\n            rescueWorks,\n            fireChiefRank,\n            amountOfSmokeGroups,\n            extinguishingAgents,\n            usingHydrants,\n            locality,\n            fireRank };\n    const encoded = encodeURI(`/api/get/${name}`);\n    useEffect((api) => {\n        if (checkProperties(objectWithProperties)) {\n            fetch(encoded, {\n                method: \"POST\",\n                body: JSON.stringify({\n                    fireStation,\n                    message,\n                    district,\n                    destination,\n                    whereWasTheFire,\n                    rescueWorks,\n                    fireChiefRank,\n                    amountOfSmokeGroups,\n                    extinguishingAgents,\n                    usingHydrants,\n                    locality,\n                    fireRank\n                }),\n                headers: {\n                    \"Content-type\": \"application/json; charset=UTF-8\"\n                }\n            })\n                .then(response => response.json())\n                .then(data => {\n                    setFires(data);\n                });\n            fetchTable({setFires, name})\n        } else {\n            fetch(encoded)\n                .then(response => response.json())\n                .then(data => {\n                    setFires(data);\n                });\n        }\n    }, [name]);\n\n    const result = <h3>Итого выездов: {fires.length}</h3>;\n    return (\n        <>\n            <div className=\"box\">\n                <div className=\"box1\">\n                    <ReactSelect onSubmit={(state) => fetchTable({setFires, name, ...state})}/>\n                </div>\n                <div className=\"box2\" >\n                    {result}\n                </div>\n            </div>\n            <table className=\"table-sm table-hover table-striped\">\n                <Table fires = {fires}/>\n\n            </table>\n        </>\n    )\n}\n\nconst fetchTable = ({fireStation = \"\",\n                        message = \"\",\n                        district = \"\",\n                        destination = \"\",\n                        whereWasTheFire = \"\",\n                        rescueWorks = \"\",\n                        fireChiefRank = \"\",\n                        amountOfSmokeGroups = \"\",\n                        extinguishingAgents = \"\",\n                        usingHydrants = \"\",\n                        locality = \"\",\n                        fireRank = \"\",\n                        name,\n                        setFires}) => {\n    const encoded = encodeURI(`/api/get/${name}`);\n    fetch(encoded, {\n        method: \"POST\",\n        body: JSON.stringify({\n            fireStation,\n            message,\n            district,\n            destination,\n            whereWasTheFire,\n            rescueWorks,\n            fireChiefRank,\n            amountOfSmokeGroups,\n            extinguishingAgents,\n            usingHydrants,\n            locality,\n            fireRank\n        }),\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n        }\n    })\n        .then(response => response.json())\n        .then(data => {\n            console.log(data.length);\n            setFires(data);\n        });\n\n}\n\nfunction checkProperties(obj) {\n    for(let key in obj){\n        if (obj[key] !== null && obj[key] !== '')\n            return false\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}